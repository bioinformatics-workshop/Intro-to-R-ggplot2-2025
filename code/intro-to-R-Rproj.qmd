---
title: "Introduction to R and RStudio"
author: Brandon Le
institute: "Institute for Genome Biology <br> Department of Botany and Plant Sciences"
title-block-banner: "#41ae76"
date: October 30, 2025
format: html
editor: visual
execute: 
  eval: false
toc: true
---

## Background

R is a freely available language and environment for statistical computing and graphics which provides a wide variety of statistical and graphical techniques.

Free Resources

-   R for Data Science (2nd edition) (<https://r4ds.hadley.nz/>)
-   The Comprehensive R Archive Network (CRAN) (<https://cloud.r-project.org>)

## Basic R Syntax and Usage

------------------------------------------------------------------------

### R as a calculator

```{r calculator}
# simple addition
1 + 100      

# order of operations
3 + 5 * 2    

# square 
3^2          

# incomplete command. Press ESC to cancel a command
1 +          
```

### Mathematical functions

```{r math-functions}
# trigonometry functions
sin(30)    

# natural log
log(1)     

# log base-10
log10(10)  

# log base-2
log2(8)

# log base n
log(4, base = 4)

# square root
sqrt(4)    

# absolute value
abs(-4)    
```

### Comparing things

```{r comparisons}
# equality (two equals sign)
1 == 1    

# inequality
1 != 2    

# less than
1 < 2     

# greater than
1 > 2     

# greater than or equal to
1 >= 2    
```

## Data Structures

There are various data structures in R including atomic vectors, data frames, matrices, and lists.

To learn more about the R data structures, check out this [link](https://www.r-bloggers.com/2025/01/basic-data-structures-in-r-vectors-matrices-and-data-frames).

### Vectors

Vectors are the basic building blocks in R. These are one-dimensional arrays that store elements of the same data type (e.g., numbers, characters, logical values).

```{r vectors}
# vector containing numbers 1 to 5
1:5          

# vector containing 2 to the power of (1 to 5)
2^(1:5)   

# vector containing strings
c("run", "climb", "hike")

# assigning vector to a variable
x <- 1:5     

# calculations on variables
2^x          
```

Use the `c()` to combine multiple elements into a vector

```{r combine}
# combining elements
c(1:5, 2^(1:5))   

# combining elements with variables
c(x, 2*x)         

# combining characters/strings
c("a", "b", "c")  
```

### Matrix

A matrix is a two-dimensional array that store elements of the same data type. Elements are accessible by their row and column indices.

```{r}
mat <- matrix(1:12, nrow = 4, ncol = 3)
mat
mat[1,3]
```

### Data frame

A data frame is a two-dimensional structures similar to a spreadsheet containing rows and columns. A data frame can contain columns with different data types. Great for storing tabular data.

```{r}
df <- data.frame("points" = letters[1:5],
                 "x_axis" = 1:5,
                 "y_axis" = 2^(1:5))  
df
```

### Lists

Lists are one-dimensional ordered collections of objects, where the objects can be of different lengths and type (e.g., vectors, matrices, data frames, lists). Highly flexible and suitable for storing complex, heterogenous data

```{r list}
# create a list
my_list <- list("x_vec" = 1:5, 
                "y_vec" = 2^(1:5), 
                "z_vec" = letters[1:5],
                "dataframes" = df,
                "matrices" = mat)
my_list
```

List elements can be accessed by their numerical index using double square brackets \[\[\]\] or by their assigned name using the dollar sign \$ or double square brackets with the name in quotes.

```{r}
# accessing elements within the list by the assigned name
my_list$dataframes
my_list$matrices

# using indices
my_list
my_list[[4]][[1]]
my_list$dataframes$points
my_list[["matrices"]]

```

## Variables

Variables are used to store the information from an R object (e.g., vector, matrix).

Variable names can contain letters, numbers, underscores and periods but no spaces. They must start with a letter or a period followed by a letter (they cannot start with a number nor an underscore). Variables beginning with a period are hidden variables. Different people use different conventions for long variable names, these include

-   periods.between.words (avoid this as some functions use periods as well)
-   underscores_between_words
-   camelCaseToSeparateWords
-   CapitalLettersForEachWord

What you use is up to you, but be **consistent.**

### Assigning values to variables

```{r}
x <- 4     # assigns value to the variable x
x          # view output of x

log(x)     # natural log of variable x
```

### Reassigning values to variables

```{r}
x <- 100
x
x <- x+1
x
```

### Spelling Counts!

::: callout-important
R doesn't care about spaces BUT do care about mispelling!!!
:::

```{r spelling-matters}

a <- 2   +    3
a
b <- (2+3)
b
c <- ( 2 + 3 )
c

UCR_rocks <- 
  2 * 10^7 + 
  0 * 10^6 + 
  2 * 10^5 + 
  5 * 10^4 + 
  1 * 10^3 + 
  0 * 10^2 + 
  3 * 10 + 
  0

UCR_rock
ucr_rocks
```

### Quick Exercise

Why does this code not work? Look carefully!!

```{r}
my_variable <- 10
my_varÄ±able
```

------------------------------------------------------------------------

## Installing packages

In addition to base packages included with R, you can install additional packages that add novel functionalities to R (e.g., `DESeq2` for differential expression analysis, `ggplot2` for plotting)

### Installing packages in CRAN

```{r packages}
# list all install packages
installed.packages()                 

# installing packagename
install.packages("packagename")   

# update all packages
update.packages()                 

# update packagename
update.packages("packagename")    

# make packagename available for use
library(packagename)
```

### Installing packages in development through GitHub

```{r dev-tools}
# install devtools
install.packages("devtools")

# load devtools library
library(devtools)

# install from github
install_github("Author/Packagename")
```

## Environment management

Managing environment in R

```{r environment-management}
# list all variables
ls()                

# remove variable x
rm(x)              

# remove ALL variables
rm(list = ls())     

# print R version, OS, and loaded packages
# useful for troubleshooting and data reproducibility
sessionInfo()       
```

## Example Exercise

What will the value of each variable be after each statement?

```{r example1, eval=FALSE}
mass <- 50
mass
mass <- mass * 2
mass
```

```{r example2, eval=FALSE}
age <- 103
age <- age -50
age
```

Write a code comparing mass to age

```{r example3, eval=FALSE}
age ? mass    # is age not equal to mass?
mass ? age     # is mass greater than age?
```

Clean up the environment by deleting the mass and age variables

```{r example4, eval=FALSE}
rm(?) # removes age variable
rm(?) # removes mass variable
rm(?) # removes mass and age variable
rm(?) # removes all variables
```
